import * as tslib_1 from "tslib";
import { DateTime } from 'luxon';
import { TimeFormat } from '../models/time-format.enum';
import { TimePeriod } from '../models/time-period.enum';
import { isBetween, isSameOrAfter, isSameOrBefore } from '../utils/timepicker.utils';
// @dynamic
var TimeAdapter = /** @class */ (function () {
    function TimeAdapter() {
    }
    TimeAdapter.parseTime = function (time, opts) {
        var _a = TimeAdapter.getLocaleOptionsByTime(time, opts), numberingSystem = _a.numberingSystem, locale = _a.locale;
        var isPeriodExist = time.split(' ').length === 2;
        var timeMask = isPeriodExist ? TimeFormat.TWELVE_SHORT : TimeFormat.TWENTY_FOUR_SHORT;
        return DateTime.fromFormat(time, timeMask, { numberingSystem: numberingSystem, locale: locale });
    };
    TimeAdapter.formatTime = function (time, opts) {
        var format = opts.format;
        return TimeAdapter.parseTime(time, opts).setLocale(TimeAdapter.DEFAULT_LOCALE)
            .toLocaleString(tslib_1.__assign({}, DateTime.TIME_SIMPLE, { hour12: format !== 24, numberingSystem: TimeAdapter.DEFAULT_NUMBERING_SYSTEM }));
    };
    TimeAdapter.toLocaleTimeString = function (time, opts) {
        if (opts === void 0) { opts = {}; }
        var _a = opts.format, format = _a === void 0 ? TimeAdapter.DEFAULT_FORMAT : _a, _b = opts.locale, locale = _b === void 0 ? TimeAdapter.DEFAULT_LOCALE : _b;
        var timeFormat = tslib_1.__assign({}, DateTime.TIME_SIMPLE, { hour12: format !== 24 });
        var timeMask = (format === 24) ? TimeFormat.TWENTY_FOUR_SHORT : TimeFormat.TWELVE_SHORT;
        return DateTime.fromFormat(time, timeMask).setLocale(locale).toLocaleString(timeFormat);
    };
    TimeAdapter.isTimeAvailable = function (time, min, max, granularity, minutesGap, format) {
        if (!time) {
            return;
        }
        var convertedTime = this.parseTime(time, { format: format });
        var minutes = convertedTime.minute;
        if (minutesGap && minutes === minutes && minutes % minutesGap !== 0) {
            throw new Error("Your minutes - " + minutes + " doesn't match your minutesGap - " + minutesGap);
        }
        var isAfter = (min && !max)
            && isSameOrAfter(convertedTime, min, granularity);
        var isBefore = (max && !min)
            && isSameOrBefore(convertedTime, max, granularity);
        var between = (min && max)
            && isBetween(convertedTime, min, max, granularity);
        var isAvailable = !min && !max;
        return isAfter || isBefore || between || isAvailable;
    };
    /***
     *  Format hour according to time format (12 or 24)
     */
    TimeAdapter.formatHour = function (currentHour, format, period) {
        if (format === 24) {
            return currentHour;
        }
        var hour = period === TimePeriod.AM ? currentHour : currentHour + 12;
        if (period === TimePeriod.AM && hour === 12) {
            return 0;
        }
        else if (period === TimePeriod.PM && hour === 24) {
            return 12;
        }
        return hour;
    };
    TimeAdapter.fromDateTimeToString = function (time, format) {
        var timeFormat = format === 24 ? TimeFormat.TWENTY_FOUR : TimeFormat.TWELVE;
        return time.reconfigure({
            numberingSystem: TimeAdapter.DEFAULT_NUMBERING_SYSTEM,
            locale: TimeAdapter.DEFAULT_LOCALE
        }).toFormat(timeFormat);
    };
    TimeAdapter.getLocaleOptionsByTime = function (time, opts) {
        var _a = DateTime.local().setLocale(opts.locale).resolvedLocaleOpts(), numberingSystem = _a.numberingSystem, locale = _a.locale;
        var localeConfig = { numberingSystem: numberingSystem, locale: locale };
        var defaultConfig = { numberingSystem: TimeAdapter.DEFAULT_NUMBERING_SYSTEM, locale: TimeAdapter.DEFAULT_LOCALE };
        return isNaN(parseInt(time, 10)) ? localeConfig : defaultConfig;
    };
    TimeAdapter.DEFAULT_FORMAT = 12;
    TimeAdapter.DEFAULT_LOCALE = 'en-US';
    TimeAdapter.DEFAULT_NUMBERING_SYSTEM = 'latn';
    return TimeAdapter;
}());
export { TimeAdapter };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS1hZGFwdGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LW1hdGVyaWFsLXRpbWVwaWNrZXIvIiwic291cmNlcyI6WyJzcmMvYXBwL21hdGVyaWFsLXRpbWVwaWNrZXIvc2VydmljZXMvdGltZS1hZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUF5RCxNQUFNLE9BQU8sQ0FBQztBQUV4RixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDeEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ3hELE9BQU8sRUFBRSxTQUFTLEVBQUUsYUFBYSxFQUFFLGNBQWMsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBR3JGLFdBQVc7QUFDWDtJQUFBO0lBOEZBLENBQUM7SUF6RlUscUJBQVMsR0FBaEIsVUFBaUIsSUFBWSxFQUFFLElBQWlCO1FBQ3RDLElBQUEsbURBQTBFLEVBQXpFLG9DQUFlLEVBQUUsa0JBQXdELENBQUM7UUFDakYsSUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDO1FBQ25ELElBQU0sUUFBUSxHQUFHLGFBQWEsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLGlCQUFpQixDQUFDO1FBRXhGLE9BQU8sUUFBUSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLEVBQUMsZUFBZSxpQkFBQSxFQUFFLE1BQU0sUUFBQSxFQUFDLENBQUMsQ0FBQztJQUMxRSxDQUFDO0lBRU0sc0JBQVUsR0FBakIsVUFBa0IsSUFBWSxFQUFFLElBQWlCO1FBQ3RDLElBQUEsb0JBQU0sQ0FBUztRQUV0QixPQUFPLFdBQVcsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsY0FB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QTRCLElBQWMsRUFBRSxNQUFjO1FBQ3RELElBQU0sVUFBVSxHQUFHLE1BQU0sS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUM7UUFFOUUsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO1lBQ3BCLGVBQWUsRUFBRSxXQUFXLENBQUMsd0JBQXdCO1lBQ3JELE1BQU0sRUFBRSxXQUFXLENBQUMsY0FBYztTQUNyQyxDQUFDLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFFYyxrQ0FBc0IsR0FBckMsVUFBc0MsSUFBWSxFQUFFLElBQW1CO1FBQzdELElBQUEsaUVBQXdGLEVBQXZGLG9DQUFlLEVBQUUsa0JBQXNFLENBQUM7UUFDL0YsSUFBTSxZQUFZLEdBQWtCLEVBQUMsZUFBZSxFQUFFLGVBQWtDLEVBQUUsTUFBTSxRQUFBLEVBQUMsQ0FBQztRQUNsRyxJQUFNLGFBQWEsR0FBa0IsRUFBQyxlQUFlLEVBQUUsV0FBVyxDQUFDLHdCQUF3QixFQUFFLE1BQU0sRUFBRSxXQUFXLENBQUMsY0FBYyxFQUFDLENBQUM7UUFFakksT0FBTyxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQztJQUNwRSxDQUFDO0lBNUZNLDBCQUFjLEdBQUcsRUFBRSxDQUFDO0lBQ3BCLDBCQUFjLEdBQUcsT0FBTyxDQUFDO0lBQ3pCLG9DQUF3QixHQUFvQixNQUFNLENBQUM7SUEyRjlELGtCQUFDO0NBQUEsQUE5RkQsSUE4RkM7U0E5RlksV0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERhdGVUaW1lLCBEYXRlVGltZUZvcm1hdE9wdGlvbnMsIExvY2FsZU9wdGlvbnMsIE51bWJlcmluZ1N5c3RlbSB9IGZyb20gJ2x1eG9uJztcblxuaW1wb3J0IHsgVGltZUZvcm1hdCB9IGZyb20gJy4uL21vZGVscy90aW1lLWZvcm1hdC5lbnVtJztcbmltcG9ydCB7IFRpbWVQZXJpb2QgfSBmcm9tICcuLi9tb2RlbHMvdGltZS1wZXJpb2QuZW51bSc7XG5pbXBvcnQgeyBpc0JldHdlZW4sIGlzU2FtZU9yQWZ0ZXIsIGlzU2FtZU9yQmVmb3JlIH0gZnJvbSAnLi4vdXRpbHMvdGltZXBpY2tlci51dGlscyc7XG5pbXBvcnQgeyBUaW1lT3B0aW9ucyB9IGZyb20gJy4uL21vZGVscy90aW1lLW9wdGlvbnMuaW50ZXJmYWNlJztcblxuLy8gQGR5bmFtaWNcbmV4cG9ydCBjbGFzcyBUaW1lQWRhcHRlciB7XG4gICAgc3RhdGljIERFRkFVTFRfRk9STUFUID0gMTI7XG4gICAgc3RhdGljIERFRkFVTFRfTE9DQUxFID0gJ2VuLVVTJztcbiAgICBzdGF0aWMgREVGQVVMVF9OVU1CRVJJTkdfU1lTVEVNOiBOdW1iZXJpbmdTeXN0ZW0gPSAnbGF0bic7XG5cbiAgICBzdGF0aWMgcGFyc2VUaW1lKHRpbWU6IHN0cmluZywgb3B0czogVGltZU9wdGlvbnMpOiBEYXRlVGltZSB7XG4gICAgICAgIGNvbnN0IHtudW1iZXJpbmdTeXN0ZW0sIGxvY2FsZX0gPSBUaW1lQWRhcHRlci5nZXRMb2NhbGVPcHRpb25zQnlUaW1lKHRpbWUsIG9wdHMpO1xuICAgICAgICBjb25zdCBpc1BlcmlvZEV4aXN0ID0gdGltZS5zcGxpdCgnICcpLmxlbmd0aCA9PT0gMjtcbiAgICAgICAgY29uc3QgdGltZU1hc2sgPSBpc1BlcmlvZEV4aXN0ID8gVGltZUZvcm1hdC5UV0VMVkVfU0hPUlQgOiBUaW1lRm9ybWF0LlRXRU5UWV9GT1VSX1NIT1JUO1xuXG4gICAgICAgIHJldHVybiBEYXRlVGltZS5mcm9tRm9ybWF0KHRpbWUsIHRpbWVNYXNrLCB7bnVtYmVyaW5nU3lzdGVtLCBsb2NhbGV9KTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZm9ybWF0VGltZSh0aW1lOiBzdHJpbmcsIG9wdHM6IFRpbWVPcHRpb25zKTogc3RyaW5nIHtcbiAgICAgICAgY29uc3Qge2Zvcm1hdH0gPSBvcHRzO1xuXG4gICAgICAgIHJldHVybiBUaW1lQWRhcHRlci5wYXJzZVRpbWUodGltZSwgb3B0cykuc2V0TG9jYWxlKFRpbWVBZGFwdGVyLkRFRkFVTFRfTE9DQUxFKVxuICAgICAgICAgICAgLnRvTG9jYWxlU3RyaW5nKHtcbiAgICAgICAgICAgICAgICAuLi5EYXRlVGltZS5USU1FX1NJTVBMRSxcbiAgICAgICAgICAgICAgICBob3VyMTI6IGZvcm1hdCAhPT0gMjQsXG4gICAgICAgICAgICAgICAgbnVtYmVyaW5nU3lzdGVtOiBUaW1lQWRhcHRlci5ERUZBVUxUX05VTUJFUklOR19TWVNURU1cbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIHN0YXRpYyB0b0xvY2FsZVRpbWVTdHJpbmcodGltZTogc3RyaW5nLCBvcHRzOiBUaW1lT3B0aW9ucyA9IHt9KTogc3RyaW5nIHtcbiAgICAgICAgY29uc3Qge2Zvcm1hdCA9IFRpbWVBZGFwdGVyLkRFRkFVTFRfRk9STUFULCBsb2NhbGUgPSBUaW1lQWRhcHRlci5ERUZBVUxUX0xPQ0FMRX0gPSBvcHRzO1xuICAgICAgICBjb25zdCB0aW1lRm9ybWF0OiBEYXRlVGltZUZvcm1hdE9wdGlvbnMgPSB7Li4uRGF0ZVRpbWUuVElNRV9TSU1QTEUsIGhvdXIxMjogZm9ybWF0ICE9PSAyNH07XG4gICAgICAgIGNvbnN0IHRpbWVNYXNrID0gKGZvcm1hdCA9PT0gMjQpID8gVGltZUZvcm1hdC5UV0VOVFlfRk9VUl9TSE9SVCA6IFRpbWVGb3JtYXQuVFdFTFZFX1NIT1JUO1xuXG4gICAgICAgIHJldHVybiBEYXRlVGltZS5mcm9tRm9ybWF0KHRpbWUsIHRpbWVNYXNrKS5zZXRMb2NhbGUobG9jYWxlKS50b0xvY2FsZVN0cmluZyh0aW1lRm9ybWF0KTtcbiAgICB9XG5cbiAgICBzdGF0aWMgaXNUaW1lQXZhaWxhYmxlKFxuICAgICAgICB0aW1lOiBzdHJpbmcsXG4gICAgICAgIG1pbj86IERhdGVUaW1lLFxuICAgICAgICBtYXg/OiBEYXRlVGltZSxcbiAgICAgICAgZ3JhbnVsYXJpdHk/OiAnaG91cnMnIHwgJ21pbnV0ZXMnLFxuICAgICAgICBtaW51dGVzR2FwPzogbnVtYmVyLFxuICAgICAgICBmb3JtYXQ/OiBudW1iZXJcbiAgICApOiBib29sZWFuIHtcbiAgICAgICAgaWYgKCF0aW1lKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjb252ZXJ0ZWRUaW1lID0gdGhpcy5wYXJzZVRpbWUodGltZSwge2Zvcm1hdH0pO1xuICAgICAgICBjb25zdCBtaW51dGVzID0gY29udmVydGVkVGltZS5taW51dGU7XG5cbiAgICAgICAgaWYgKG1pbnV0ZXNHYXAgJiYgbWludXRlcyA9PT0gbWludXRlcyAmJiBtaW51dGVzICUgbWludXRlc0dhcCAhPT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBZb3VyIG1pbnV0ZXMgLSAke21pbnV0ZXN9IGRvZXNuXFwndCBtYXRjaCB5b3VyIG1pbnV0ZXNHYXAgLSAke21pbnV0ZXNHYXB9YCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaXNBZnRlciA9IChtaW4gJiYgIW1heClcbiAgICAgICAgICAgICYmIGlzU2FtZU9yQWZ0ZXIoY29udmVydGVkVGltZSwgbWluLCBncmFudWxhcml0eSk7XG4gICAgICAgIGNvbnN0IGlzQmVmb3JlID0gKG1heCAmJiAhbWluKVxuICAgICAgICAgICAgJiYgaXNTYW1lT3JCZWZvcmUoY29udmVydGVkVGltZSwgbWF4LCBncmFudWxhcml0eSk7XG4gICAgICAgIGNvbnN0IGJldHdlZW4gPSAobWluICYmIG1heClcbiAgICAgICAgICAgICYmIGlzQmV0d2Vlbihjb252ZXJ0ZWRUaW1lLCBtaW4sIG1heCwgZ3JhbnVsYXJpdHkpO1xuICAgICAgICBjb25zdCBpc0F2YWlsYWJsZSA9ICFtaW4gJiYgIW1heDtcblxuICAgICAgICByZXR1cm4gaXNBZnRlciB8fCBpc0JlZm9yZSB8fCBiZXR3ZWVuIHx8IGlzQXZhaWxhYmxlO1xuICAgIH1cblxuICAgIC8qKipcbiAgICAgKiAgRm9ybWF0IGhvdXIgYWNjb3JkaW5nIHRvIHRpbWUgZm9ybWF0ICgxMiBvciAyNClcbiAgICAgKi9cbiAgICBzdGF0aWMgZm9ybWF0SG91cihjdXJyZW50SG91cjogbnVtYmVyLCBmb3JtYXQ6IG51bWJlciwgcGVyaW9kOiBUaW1lUGVyaW9kKTogbnVtYmVyIHtcbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gMjQpIHtcbiAgICAgICAgICAgIHJldHVybiBjdXJyZW50SG91cjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBob3VyID0gcGVyaW9kID09PSBUaW1lUGVyaW9kLkFNID8gY3VycmVudEhvdXIgOiBjdXJyZW50SG91ciArIDEyO1xuXG4gICAgICAgIGlmIChwZXJpb2QgPT09IFRpbWVQZXJpb2QuQU0gJiYgaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9IGVsc2UgaWYgKHBlcmlvZCA9PT0gVGltZVBlcmlvZC5QTSAmJiBob3VyID09PSAyNCkge1xuICAgICAgICAgICAgcmV0dXJuIDEyO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBob3VyO1xuICAgIH1cblxuICAgIHN0YXRpYyBmcm9tRGF0ZVRpbWVUb1N0cmluZyh0aW1lOiBEYXRlVGltZSwgZm9ybWF0OiBudW1iZXIpOiBzdHJpbmcge1xuICAgICAgICBjb25zdCB0aW1lRm9ybWF0ID0gZm9ybWF0ID09PSAyNCA/IFRpbWVGb3JtYXQuVFdFTlRZX0ZPVVIgOiBUaW1lRm9ybWF0LlRXRUxWRTtcblxuICAgICAgICByZXR1cm4gdGltZS5yZWNvbmZpZ3VyZSh7XG4gICAgICAgICAgICBudW1iZXJpbmdTeXN0ZW06IFRpbWVBZGFwdGVyLkRFRkFVTFRfTlVNQkVSSU5HX1NZU1RFTSxcbiAgICAgICAgICAgIGxvY2FsZTogVGltZUFkYXB0ZXIuREVGQVVMVF9MT0NBTEVcbiAgICAgICAgfSkudG9Gb3JtYXQodGltZUZvcm1hdCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgZ2V0TG9jYWxlT3B0aW9uc0J5VGltZSh0aW1lOiBzdHJpbmcsIG9wdHM6IExvY2FsZU9wdGlvbnMpOiBMb2NhbGVPcHRpb25zIHtcbiAgICAgICAgY29uc3Qge251bWJlcmluZ1N5c3RlbSwgbG9jYWxlfSA9IERhdGVUaW1lLmxvY2FsKCkuc2V0TG9jYWxlKG9wdHMubG9jYWxlKS5yZXNvbHZlZExvY2FsZU9wdHMoKTtcbiAgICAgICAgY29uc3QgbG9jYWxlQ29uZmlnOiBMb2NhbGVPcHRpb25zID0ge251bWJlcmluZ1N5c3RlbTogbnVtYmVyaW5nU3lzdGVtIGFzIE51bWJlcmluZ1N5c3RlbSwgbG9jYWxlfTtcbiAgICAgICAgY29uc3QgZGVmYXVsdENvbmZpZzogTG9jYWxlT3B0aW9ucyA9IHtudW1iZXJpbmdTeXN0ZW06IFRpbWVBZGFwdGVyLkRFRkFVTFRfTlVNQkVSSU5HX1NZU1RFTSwgbG9jYWxlOiBUaW1lQWRhcHRlci5ERUZBVUxUX0xPQ0FMRX07XG5cbiAgICAgICAgcmV0dXJuIGlzTmFOKHBhcnNlSW50KHRpbWUsIDEwKSkgPyBsb2NhbGVDb25maWcgOiBkZWZhdWx0Q29uZmlnO1xuICAgIH1cbn1cbiJdfQ==
import * as tslib_1 from "tslib";
import { Inject, Pipe } from '@angular/core';
import { TIME_LOCALE } from '../tokens/time-locale.token';
import { TimeUnit } from '../models/time-unit.enum';
import { DateTime } from 'luxon';
let TimeParserPipe = class TimeParserPipe {
    constructor(locale) {
        this.locale = locale;
        this.numberingSystem = DateTime.local().setLocale(this.locale).resolvedLocaleOpts().numberingSystem;
    }
    transform(time, timeUnit = TimeUnit.HOUR) {
        if (time == null || time === '') {
            return '';
        }
        if (!isNaN(+time)) {
            return time;
        }
        if (timeUnit === TimeUnit.MINUTE) {
            return this.parseTime(time, 'm', 'minute');
        }
        return this.parseTime(time, 'H', 'hour');
    }
    parseTime(time, format, timeMeasure) {
        const parsedTime = DateTime.fromFormat(String(time), format, { numberingSystem: this.numberingSystem })[timeMeasure];
        if (!isNaN(parsedTime)) {
            return parsedTime;
        }
        throw new Error(`Cannot parse time - ${time}`);
    }
};
TimeParserPipe = tslib_1.__decorate([
    Pipe({
        name: 'timeParser'
    }),
    tslib_1.__param(0, Inject(TIME_LOCALE)),
    tslib_1.__metadata("design:paramtypes", [String])
], TimeParserPipe);
export { TimeParserPipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS1wYXJzZXIucGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1tYXRlcmlhbC10aW1lcGlja2VyLyIsInNvdXJjZXMiOlsic3JjL2FwcC9tYXRlcmlhbC10aW1lcGlja2VyL3BpcGVzL3RpbWUtcGFyc2VyLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUM1RCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDMUQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxRQUFRLEVBQW1CLE1BQU0sT0FBTyxDQUFDO0FBT2xELElBQWEsY0FBYyxHQUEzQixNQUFhLGNBQWM7SUFJdkIsWUFBeUMsTUFBYztRQUFkLFdBQU0sR0FBTixNQUFNLENBQVE7UUFDbkQsSUFBSSxDQUFDLGVBQWUsR0FBRyxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLGVBQWtDLENBQUM7SUFDM0gsQ0FBQztJQUVELFNBQVMsQ0FBQyxJQUFxQixFQUFFLFFBQVEsR0FBRyxRQUFRLENBQUMsSUFBSTtRQUNyRCxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLEVBQUUsRUFBRTtZQUM3QixPQUFPLEVBQUUsQ0FBQztTQUNiO1FBRUQsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ2YsT0FBTyxJQUFJLENBQUM7U0FDZjtRQUVELElBQUksUUFBUSxLQUFLLFFBQVEsQ0FBQyxNQUFNLEVBQUU7WUFDOUIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUM7U0FDOUM7UUFFRCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUU3QyxDQUFDO0lBRU8sU0FBUyxDQUFDLElBQXFCLEVBQUUsTUFBYyxFQUFFLFdBQXdCO1FBQzdFLE1BQU0sVUFBVSxHQUFHLFFBQVEsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxFQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsZUFBZSxFQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUVuSCxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQ3BCLE9BQU8sVUFBVSxDQUFDO1NBQ3JCO1FBRUQsTUFBTSxJQUFJLEtBQUssQ0FBQyx1QkFBdUIsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUNuRCxDQUFDO0NBRUosQ0FBQTtBQW5DWSxjQUFjO0lBSDFCLElBQUksQ0FBQztRQUNGLElBQUksRUFBRSxZQUFZO0tBQ3JCLENBQUM7SUFLZSxtQkFBQSxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUE7O0dBSnZCLGNBQWMsQ0FtQzFCO1NBbkNZLGNBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QsIFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRJTUVfTE9DQUxFIH0gZnJvbSAnLi4vdG9rZW5zL3RpbWUtbG9jYWxlLnRva2VuJztcbmltcG9ydCB7IFRpbWVVbml0IH0gZnJvbSAnLi4vbW9kZWxzL3RpbWUtdW5pdC5lbnVtJztcbmltcG9ydCB7IERhdGVUaW1lLCBOdW1iZXJpbmdTeXN0ZW0gfSBmcm9tICdsdXhvbic7XG5cbnR5cGUgVGltZU1lYXN1cmUgPSAnaG91cicgfCAnbWludXRlJztcblxuQFBpcGUoe1xuICAgIG5hbWU6ICd0aW1lUGFyc2VyJ1xufSlcbmV4cG9ydCBjbGFzcyBUaW1lUGFyc2VyUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuXG4gICAgcHJpdmF0ZSBudW1iZXJpbmdTeXN0ZW06IE51bWJlcmluZ1N5c3RlbTtcblxuICAgIGNvbnN0cnVjdG9yKEBJbmplY3QoVElNRV9MT0NBTEUpIHByaXZhdGUgbG9jYWxlOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5udW1iZXJpbmdTeXN0ZW0gPSBEYXRlVGltZS5sb2NhbCgpLnNldExvY2FsZSh0aGlzLmxvY2FsZSkucmVzb2x2ZWRMb2NhbGVPcHRzKCkubnVtYmVyaW5nU3lzdGVtIGFzIE51bWJlcmluZ1N5c3RlbTtcbiAgICB9XG5cbiAgICB0cmFuc2Zvcm0odGltZTogc3RyaW5nIHwgbnVtYmVyLCB0aW1lVW5pdCA9IFRpbWVVbml0LkhPVVIpOiBudW1iZXIgfCBzdHJpbmcge1xuICAgICAgICBpZiAodGltZSA9PSBudWxsIHx8IHRpbWUgPT09ICcnKSB7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWlzTmFOKCt0aW1lKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRpbWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGltZVVuaXQgPT09IFRpbWVVbml0Lk1JTlVURSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VUaW1lKHRpbWUsICdtJywgJ21pbnV0ZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VUaW1lKHRpbWUsICdIJywgJ2hvdXInKTtcblxuICAgIH1cblxuICAgIHByaXZhdGUgcGFyc2VUaW1lKHRpbWU6IHN0cmluZyB8IG51bWJlciwgZm9ybWF0OiBzdHJpbmcsIHRpbWVNZWFzdXJlOiBUaW1lTWVhc3VyZSk6IG51bWJlciB7XG4gICAgICAgIGNvbnN0IHBhcnNlZFRpbWUgPSBEYXRlVGltZS5mcm9tRm9ybWF0KFN0cmluZyh0aW1lKSwgZm9ybWF0LCB7bnVtYmVyaW5nU3lzdGVtOiB0aGlzLm51bWJlcmluZ1N5c3RlbX0pW3RpbWVNZWFzdXJlXTtcblxuICAgICAgICBpZiAoIWlzTmFOKHBhcnNlZFRpbWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VkVGltZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IHBhcnNlIHRpbWUgLSAke3RpbWV9YCk7XG4gICAgfVxuXG59XG4iXX0=